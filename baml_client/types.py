###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union


class ApplicationCategory(str, Enum):
    
    Accept = "Accept"
    Reject = "Reject"
    WorthHavingALook = "WorthHavingALook"

class FinalApplicationCategory(str, Enum):
    
    Accept = "Accept"
    Reject = "Reject"

class LanguageProficiency(str, Enum):
    
    Elementary = "Elementary"
    LimitedWorking = "LimitedWorking"
    ProfessionalWorking = "ProfessionalWorking"
    FullProfessional = "FullProfessional"
    Native = "Native"

class SkillLevel(str, Enum):
    
    Beginner = "Beginner"
    Intermediate = "Intermediate"
    Advanced = "Advanced"
    Expert = "Expert"

class TypeofDevelopment(str, Enum):
    
    FD = "FD"
    BD = "BD"
    FSD = "FSD"
    MD = "MD"
    DOE = "DOE"
    DE = "DE"
    SD = "SD"
    GD = "GD"
    EED = "EED"
    CD = "CD"
    AID = "AID"
    DD = "DD"
    BLD = "BLD"
    ARD = "ARD"

class CallSummaryOutput(BaseModel):
    
    
    fixedtext: str

class Certification(BaseModel):
    
    
    name: str
    issuing_organization: str
    date_obtained: str
    expiry_date: Optional[str] = None
    link: Optional[str] = None

class ContactInfo(BaseModel):
    
    
    full_name: str
    email: str
    phone: str
    address: Optional[str] = None
    linkedin: Optional[str] = None
    website: Optional[str] = None
    github: Optional[str] = None

class Education(BaseModel):
    
    
    institution: str
    degree: str
    field_of_study: str
    graduation_date: Optional[str] = None
    gpa: Optional[str] = None
    honors: Union[List[str], Optional[None]]

class Evaluation(BaseModel):
    
    
    OverallScore: int
    Strengths: List[str]
    Weaknesses: List[str]
    Explanation: List[str]
    Recommendation: str
    ApplicationStatus: "ApplicationCategory"
    Questions: Union[List[str], Optional[None]]

class Experience(BaseModel):
    
    
    company: str
    position: str
    start_date: str
    end_date: Optional[str] = None
    location: Optional[str] = None
    is_current: bool
    responsibilities: Union[List[str], Optional[None]]
    achievements: Union[List[str], Optional[None]]

class FinalEvaluation(BaseModel):
    
    
    OverallScore: int
    Strengths: List[str]
    Weaknesses: List[str]
    Explanation: List[str]
    Recommendation: str
    ApplicationStatus: "FinalApplicationCategory"

class Interest(BaseModel):
    
    
    intrest: List[str]

class Language(BaseModel):
    
    
    name: str
    proficiency: "LanguageProficiency"

class Project(BaseModel):
    
    
    project: Optional["Projects"] = None

class Projects(BaseModel):
    
    
    name: str
    description: str
    technologies: str
    category: "TypeofDevelopment"
    url: Optional[str] = None

class Resume(BaseModel):
    
    
    contact_info: "ContactInfo"
    summary: str
    typeOfDevelopment: List["TypeofDevelopment"]
    work_experience: List["Experience"]
    education: List["Education"]
    skills: List["Skill"]
    projects: Union[List["Project"], Optional[None]]
    certifications: Union[List["Certification"], Optional[None]]
    languages: Union[List["Language"], Optional[None]]
    interests: Union[List[str], Optional[None]]

class Skill(BaseModel):
    
    
    name: str
    level: "SkillLevel"
